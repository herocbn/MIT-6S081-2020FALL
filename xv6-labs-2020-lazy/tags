!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-format	Makefile	/^	git archive --format=tar HEAD | gzip > lab-$(LAB)-handin.tar.gz$/;"	m
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
Align	user/umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	user/sh.c	12;"	d	file:
BACKSPACE	kernel/console.c	25;"	d	file:
BBLOCK	kernel/fs.h	51;"	d
BPB	kernel/fs.h	48;"	d
BSIZE	kernel/fs.h	6;"	d
BUFSZ	user/usertests.c	20;"	d	file:
C	kernel/console.c	26;"	d	file:
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb$/;"	m
CLINT	kernel/memlayout.h	29;"	d
CLINT_MTIME	kernel/memlayout.h	31;"	d
CLINT_MTIMECMP	kernel/memlayout.h	30;"	d
COLORS	gradelib.py	/^COLORS = {"default": "\\033[0m", "red": "\\033[31m", "green": "\\033[32m"}$/;"	v
CONSOLE	kernel/file.h	40;"	d
CPUS	Makefile	/^CPUS := 1$/;"	m
CPUS	Makefile	/^CPUS := 3$/;"	m
CURRENT_TEST	gradelib.py	/^CURRENT_TEST = None$/;"	v
DIRSIZ	kernel/fs.h	54;"	d
ELF_MAGIC	kernel/elf.h	3;"	d
ELF_PROG_FLAG_EXEC	kernel/elf.h	40;"	d
ELF_PROG_FLAG_READ	kernel/elf.h	42;"	d
ELF_PROG_FLAG_WRITE	kernel/elf.h	41;"	d
ELF_PROG_LOAD	kernel/elf.h	37;"	d
EXEC	user/sh.c	8;"	d	file:
FCR	kernel/uart.c	27;"	d	file:
FCR_FIFO_CLEAR	kernel/uart.c	29;"	d	file:
FCR_FIFO_ENABLE	kernel/uart.c	28;"	d	file:
FD_DEVICE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;$/;"	e	enum:file::__anon9
FD_INODE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;$/;"	e	enum:file::__anon9
FD_NONE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;$/;"	e	enum:file::__anon9
FD_PIPE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;$/;"	e	enum:file::__anon9
FSMAGIC	kernel/fs.h	25;"	d
FSSIZE	kernel/param.h	12;"	d
FWDPORT	Makefile	/^FWDPORT = $(shell expr `id -u` % 5000 + 25999)$/;"	m
GDBClient	gradelib.py	/^class GDBClient(object):$/;"	c
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
Header	user/umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	kernel/fs.h	45;"	d
IER	kernel/uart.c	24;"	d	file:
IER_RX_ENABLE	kernel/uart.c	26;"	d	file:
IER_TX_ENABLE	kernel/uart.c	25;"	d	file:
INPUT_BUF	kernel/console.c	48;"	d	file:
IPB	kernel/fs.h	42;"	d
ISR	kernel/uart.c	30;"	d	file:
K	Makefile	/^K=kernel$/;"	m
KERNBASE	kernel/memlayout.h	47;"	d
KSTACK	kernel/memlayout.h	56;"	d
LAB	conf/lab.mk	/^LAB=lazy$/;"	m
LABUPPER	Makefile	/^LABUPPER = $(shell echo $(LAB) | tr a-z A-Z)$/;"	m
LCR	kernel/uart.c	31;"	d	file:
LCR_BAUD_LATCH	kernel/uart.c	33;"	d	file:
LCR_EIGHT_BITS	kernel/uart.c	32;"	d	file:
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -z max-page-size=4096$/;"	m
LIST	user/sh.c	11;"	d	file:
LOGSIZE	kernel/param.h	10;"	d
LSR	kernel/uart.c	34;"	d	file:
LSR_RX_READY	kernel/uart.c	35;"	d	file:
LSR_TX_IDLE	kernel/uart.c	36;"	d	file:
MAKE_SATP	kernel/riscv.h	187;"	d
MAKE_TIMESTAMP	gradelib.py	/^MAKE_TIMESTAMP = 0$/;"	v
MAXARG	kernel/param.h	8;"	d
MAXARGS	user/sh.c	14;"	d	file:
MAXFILE	kernel/fs.h	29;"	d
MAXOPBLOCKS	kernel/param.h	9;"	d
MAXPATH	kernel/param.h	13;"	d
MAXVA	kernel/riscv.h	351;"	d
MIE_MEIE	kernel/riscv.h	97;"	d
MIE_MSIE	kernel/riscv.h	99;"	d
MIE_MTIE	kernel/riscv.h	98;"	d
MSTATUS_MIE	kernel/riscv.h	16;"	d
MSTATUS_MPP_M	kernel/riscv.h	13;"	d
MSTATUS_MPP_MASK	kernel/riscv.h	12;"	d
MSTATUS_MPP_S	kernel/riscv.h	14;"	d
MSTATUS_MPP_U	kernel/riscv.h	15;"	d
N	user/forktest.c	8;"	d	file:
NBUF	kernel/param.h	11;"	d
NCPU	kernel/param.h	2;"	d
NDEV	kernel/param.h	6;"	d
NDIRECT	kernel/fs.h	27;"	d
NELEM	kernel/defs.h	187;"	d
NFILE	kernel/param.h	4;"	d
NINDIRECT	kernel/fs.h	28;"	d
NINODE	kernel/param.h	5;"	d
NINODES	mkfs/mkfs.c	18;"	d	file:
NOFILE	kernel/param.h	3;"	d
NPROC	kernel/param.h	1;"	d
NUM	kernel/virtio.h	48;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	kernel/fcntl.h	4;"	d
O_RDONLY	kernel/fcntl.h	1;"	d
O_RDWR	kernel/fcntl.h	3;"	d
O_TRUNC	kernel/fcntl.h	5;"	d
O_WRONLY	kernel/fcntl.h	2;"	d
PA2PTE	kernel/riscv.h	336;"	d
PGROUNDDOWN	kernel/riscv.h	327;"	d
PGROUNDUP	kernel/riscv.h	326;"	d
PGSHIFT	kernel/riscv.h	324;"	d
PGSIZE	kernel/riscv.h	323;"	d
PHYSTOP	kernel/memlayout.h	48;"	d
PIPE	user/sh.c	10;"	d	file:
PIPESIZE	kernel/pipe.c	11;"	d	file:
PLIC	kernel/memlayout.h	34;"	d
PLIC_MCLAIM	kernel/memlayout.h	41;"	d
PLIC_MENABLE	kernel/memlayout.h	37;"	d
PLIC_MPRIORITY	kernel/memlayout.h	39;"	d
PLIC_PENDING	kernel/memlayout.h	36;"	d
PLIC_PRIORITY	kernel/memlayout.h	35;"	d
PLIC_SCLAIM	kernel/memlayout.h	42;"	d
PLIC_SENABLE	kernel/memlayout.h	38;"	d
PLIC_SPRIORITY	kernel/memlayout.h	40;"	d
PTE2PA	kernel/riscv.h	338;"	d
PTE_FLAGS	kernel/riscv.h	340;"	d
PTE_R	kernel/riscv.h	330;"	d
PTE_U	kernel/riscv.h	333;"	d
PTE_V	kernel/riscv.h	329;"	d
PTE_W	kernel/riscv.h	331;"	d
PTE_X	kernel/riscv.h	332;"	d
PX	kernel/riscv.h	345;"	d
PXMASK	kernel/riscv.h	343;"	d
PXSHIFT	kernel/riscv.h	344;"	d
QEMU	Makefile	/^QEMU = qemu-system-riscv64$/;"	m
QEMU	gradelib.py	/^class QEMU(object):$/;"	c
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -machine virt -bios none -kernel $K\/kernel -m 128M -smp $(CPUS) -nographic$/;"	m
R	kernel/virtio_disk.c	21;"	d	file:
REDIR	user/sh.c	9;"	d	file:
REGION_SZ	user/lazytests.c	11;"	d	file:
RHR	kernel/uart.c	22;"	d	file:
ROOTDEV	kernel/param.h	7;"	d
ROOTINO	kernel/fs.h	5;"	d
RUNNABLE	kernel/proc.h	/^enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	kernel/proc.h	/^enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ReadReg	kernel/uart.c	38;"	d	file:
Reg	kernel/uart.c	16;"	d	file:
Runner	gradelib.py	/^class Runner():$/;"	c
SATP_SV39	kernel/riscv.h	185;"	d
SERVERPORT	Makefile	/^SERVERPORT = $(shell expr `id -u` % 5000 + 25099)$/;"	m
SIE_SEIE	kernel/riscv.h	79;"	d
SIE_SSIE	kernel/riscv.h	81;"	d
SIE_STIE	kernel/riscv.h	80;"	d
SLEEPING	kernel/proc.h	/^enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SSTATUS_SIE	kernel/riscv.h	46;"	d
SSTATUS_SPIE	kernel/riscv.h	44;"	d
SSTATUS_SPP	kernel/riscv.h	43;"	d
SSTATUS_UIE	kernel/riscv.h	47;"	d
SSTATUS_UPIE	kernel/riscv.h	45;"	d
SYS_chdir	kernel/syscall.h	10;"	d
SYS_close	kernel/syscall.h	22;"	d
SYS_dup	kernel/syscall.h	11;"	d
SYS_exec	kernel/syscall.h	8;"	d
SYS_exit	kernel/syscall.h	3;"	d
SYS_fork	kernel/syscall.h	2;"	d
SYS_fstat	kernel/syscall.h	9;"	d
SYS_getpid	kernel/syscall.h	12;"	d
SYS_kill	kernel/syscall.h	7;"	d
SYS_link	kernel/syscall.h	20;"	d
SYS_mkdir	kernel/syscall.h	21;"	d
SYS_mknod	kernel/syscall.h	18;"	d
SYS_open	kernel/syscall.h	16;"	d
SYS_pipe	kernel/syscall.h	5;"	d
SYS_read	kernel/syscall.h	6;"	d
SYS_sbrk	kernel/syscall.h	13;"	d
SYS_sleep	kernel/syscall.h	14;"	d
SYS_unlink	kernel/syscall.h	19;"	d
SYS_uptime	kernel/syscall.h	15;"	d
SYS_wait	kernel/syscall.h	4;"	d
SYS_write	kernel/syscall.h	17;"	d
TESTS	gradelib.py	/^TESTS = []$/;"	v
THR	kernel/uart.c	23;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big' >\/dev\/null 2>&1; \\$/;"	m
TRAMPOLINE	kernel/memlayout.h	52;"	d
TRAPFRAME	kernel/memlayout.h	67;"	d
T_DEVICE	kernel/stat.h	3;"	d
T_DIR	kernel/stat.h	1;"	d
T_FILE	kernel/stat.h	2;"	d
TerminateTest	gradelib.py	/^class TerminateTest(Exception):$/;"	c
U	Makefile	/^U=user$/;"	m
UART0	kernel/memlayout.h	21;"	d
UART0_IRQ	kernel/memlayout.h	22;"	d
UART_TX_BUF_SIZE	kernel/uart.c	43;"	d	file:
UEXTRA	Makefile	/^UEXTRA=$/;"	m
ULIB	Makefile	/^ULIB = $U\/ulib.o $U\/usys.o $U\/printf.o $U\/umalloc.o$/;"	m
UNUSED	kernel/proc.h	/^enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
UPSTREAM	Makefile	/^UPSTREAM := $(shell git remote -v | grep -m 1 "xv6-labs-2020" | awk '{split($$0,a," "); print a[1]}')$/;"	m
UsedArea	kernel/virtio.h	/^struct UsedArea {$/;"	s
VIRTIO0	kernel/memlayout.h	25;"	d
VIRTIO0_IRQ	kernel/memlayout.h	26;"	d
VIRTIO_BLK_F_CONFIG_WCE	kernel/virtio.h	40;"	d
VIRTIO_BLK_F_MQ	kernel/virtio.h	41;"	d
VIRTIO_BLK_F_RO	kernel/virtio.h	38;"	d
VIRTIO_BLK_F_SCSI	kernel/virtio.h	39;"	d
VIRTIO_BLK_T_IN	kernel/virtio.h	65;"	d
VIRTIO_BLK_T_OUT	kernel/virtio.h	66;"	d
VIRTIO_CONFIG_S_ACKNOWLEDGE	kernel/virtio.h	32;"	d
VIRTIO_CONFIG_S_DRIVER	kernel/virtio.h	33;"	d
VIRTIO_CONFIG_S_DRIVER_OK	kernel/virtio.h	34;"	d
VIRTIO_CONFIG_S_FEATURES_OK	kernel/virtio.h	35;"	d
VIRTIO_F_ANY_LAYOUT	kernel/virtio.h	42;"	d
VIRTIO_MMIO_DEVICE_FEATURES	kernel/virtio.h	17;"	d
VIRTIO_MMIO_DEVICE_ID	kernel/virtio.h	15;"	d
VIRTIO_MMIO_DRIVER_FEATURES	kernel/virtio.h	18;"	d
VIRTIO_MMIO_GUEST_PAGE_SIZE	kernel/virtio.h	19;"	d
VIRTIO_MMIO_INTERRUPT_ACK	kernel/virtio.h	28;"	d
VIRTIO_MMIO_INTERRUPT_STATUS	kernel/virtio.h	27;"	d
VIRTIO_MMIO_MAGIC_VALUE	kernel/virtio.h	13;"	d
VIRTIO_MMIO_QUEUE_ALIGN	kernel/virtio.h	23;"	d
VIRTIO_MMIO_QUEUE_NOTIFY	kernel/virtio.h	26;"	d
VIRTIO_MMIO_QUEUE_NUM	kernel/virtio.h	22;"	d
VIRTIO_MMIO_QUEUE_NUM_MAX	kernel/virtio.h	21;"	d
VIRTIO_MMIO_QUEUE_PFN	kernel/virtio.h	24;"	d
VIRTIO_MMIO_QUEUE_READY	kernel/virtio.h	25;"	d
VIRTIO_MMIO_QUEUE_SEL	kernel/virtio.h	20;"	d
VIRTIO_MMIO_STATUS	kernel/virtio.h	29;"	d
VIRTIO_MMIO_VENDOR_ID	kernel/virtio.h	16;"	d
VIRTIO_MMIO_VERSION	kernel/virtio.h	14;"	d
VIRTIO_RING_F_EVENT_IDX	kernel/virtio.h	44;"	d
VIRTIO_RING_F_INDIRECT_DESC	kernel/virtio.h	43;"	d
VRING_DESC_F_NEXT	kernel/virtio.h	56;"	d
VRING_DESC_F_WRITE	kernel/virtio.h	57;"	d
VRingDesc	kernel/virtio.h	/^struct VRingDesc {$/;"	s
VRingUsedElem	kernel/virtio.h	/^struct VRingUsedElem {$/;"	s
WEBSUB	Makefile	/^WEBSUB := https:\/\/6828.scripts.mit.edu\/2020\/handin.py$/;"	m
WriteReg	kernel/uart.c	39;"	d	file:
ZOMBIE	kernel/proc.h	/^enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_GDBPORT	gradelib.py	/^    _GDBPORT = None$/;"	v	class:QEMU
__all__	gradelib.py	/^__all__ = []$/;"	v
__init__	gradelib.py	/^    def __init__(self, *default_monitors):$/;"	m	class:Runner
__init__	gradelib.py	/^    def __init__(self, *make_args):$/;"	m	class:QEMU
__init__	gradelib.py	/^    def __init__(self, port, timeout=15):$/;"	m	class:GDBClient
__monitor_start	gradelib.py	/^    def __monitor_start(self, output):$/;"	m	class:Runner	file:
__react	gradelib.py	/^    def __react(self, reactors, timeout):$/;"	m	class:Runner	file:
__send	gradelib.py	/^    def __send(self, cmd):$/;"	m	class:GDBClient	file:
__send_break	gradelib.py	/^    def __send_break(self):$/;"	m	class:GDBClient	file:
_entry	kernel/entry.S	/^_entry:$/;"	l
a0	kernel/proc.h	/^  \/* 112 *\/ uint64 a0;$/;"	m	struct:trapframe
a1	kernel/proc.h	/^  \/* 120 *\/ uint64 a1;$/;"	m	struct:trapframe
a2	kernel/proc.h	/^  \/* 128 *\/ uint64 a2;$/;"	m	struct:trapframe
a3	kernel/proc.h	/^  \/* 136 *\/ uint64 a3;$/;"	m	struct:trapframe
a4	kernel/proc.h	/^  \/* 144 *\/ uint64 a4;$/;"	m	struct:trapframe
a5	kernel/proc.h	/^  \/* 152 *\/ uint64 a5;$/;"	m	struct:trapframe
a6	kernel/proc.h	/^  \/* 160 *\/ uint64 a6;$/;"	m	struct:trapframe
a7	kernel/proc.h	/^  \/* 168 *\/ uint64 a7;$/;"	m	struct:trapframe
acquire	kernel/spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	kernel/sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
addr	kernel/virtio.h	/^  uint64 addr;$/;"	m	struct:VRingDesc
addrs	kernel/file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	kernel/fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
align	kernel/elf.h	/^  uint64 align;$/;"	m	struct:proghdr
alloc3_desc	kernel/virtio_disk.c	/^alloc3_desc(int *idx)$/;"	f	file:
alloc_desc	kernel/virtio_disk.c	/^alloc_desc()$/;"	f	file:
allocpid	kernel/proc.c	/^allocpid() {$/;"	f
allocproc	kernel/proc.c	/^allocproc(void)$/;"	f	file:
argaddr	kernel/syscall.c	/^argaddr(int n, uint64 *ip)$/;"	f
argfd	kernel/sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	kernel/syscall.c	/^argint(int n, int *ip)$/;"	f
argptest	user/usertests.c	/^void argptest(char *s)$/;"	f
argraw	kernel/syscall.c	/^argraw(int n)$/;"	f	file:
argstr	kernel/syscall.c	/^argstr(int n, char *buf, int max)$/;"	f
argv	user/init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	user/initcode.S	/^argv:$/;"	l
argv	user/sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
assert_equal	gradelib.py	/^def assert_equal(got, expect, msg=""):$/;"	f
assert_lines_match	gradelib.py	/^def assert_lines_match(text, *regexps, **kw):$/;"	f
assert_lines_match_kw	gradelib.py	/^    def assert_lines_match_kw(no=[]):$/;"	f	function:assert_lines_match
atoi	user/ulib.c	/^atoi(const char *s)$/;"	f
avail	kernel/virtio_disk.c	/^  uint16 *avail;$/;"	m	struct:disk	file:
b	kernel/virtio_disk.c	/^    struct buf *b;$/;"	m	struct:disk::__anon8	typeref:struct:disk::__anon8::buf	file:
backcmd	user/sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	user/sh.c	/^struct backcmd {$/;"	s	file:
badarg	user/usertests.c	/^badarg(char *s)$/;"	f
badwrite	user/usertests.c	/^badwrite(char *s)$/;"	f
balloc	kernel/fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs/mkfs.c	/^balloc(int used)$/;"	f
base	user/umalloc.c	/^static Header base;$/;"	v	file:
bcache	kernel/bio.c	/^} bcache;$/;"	v	typeref:struct:__anon7
begin_op	kernel/log.c	/^begin_op(void)$/;"	f
bfree	kernel/fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	kernel/bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bigargtest	user/usertests.c	/^bigargtest(char *s)$/;"	f
bigdir	user/usertests.c	/^bigdir(char *s)$/;"	f
bigfile	user/usertests.c	/^bigfile(char *s)$/;"	f
bigwrite	user/usertests.c	/^bigwrite(char *s)$/;"	f
binit	kernel/bio.c	/^binit(void)$/;"	f
block	kernel/log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	kernel/buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	kernel/fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	kernel/fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bpin	kernel/bio.c	/^bpin(struct buf *b) {$/;"	f
bread	kernel/bio.c	/^bread(uint dev, uint blockno)$/;"	f
breakpoint	gradelib.py	/^    def breakpoint(self, addr):$/;"	m	class:GDBClient
brelse	kernel/bio.c	/^brelse(struct buf *b)$/;"	f
bsstest	user/usertests.c	/^bsstest(char *s)$/;"	f
buf	gradelib.py	/^            buf = bytearray()$/;"	v	class:shell_script.setup_call_on_line.context
buf	kernel/bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon7	typeref:struct:__anon7::buf	file:
buf	kernel/buf.h	/^struct buf {$/;"	s
buf	kernel/console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon3	file:
buf	user/cat.c	/^char buf[512];$/;"	v
buf	user/grep.c	/^char buf[1024];$/;"	v
buf	user/usertests.c	/^char buf[BUFSZ];$/;"	v
buf	user/wc.c	/^char buf[512];$/;"	v
bunpin	kernel/bio.c	/^bunpin(struct buf *b) {$/;"	f
bwrite	kernel/bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	kernel/fs.c	/^bzero(int dev, int bno)$/;"	f	file:
call_on_line	gradelib.py	/^def call_on_line(regexp, callback):$/;"	f
cat	user/cat.c	/^cat(int fd)$/;"	f
chan	kernel/proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
check_answers	gradelib.py	/^def check_answers(file, n=10):$/;"	f
check_time	gradelib.py	/^def check_time():$/;"	f
clockintr	kernel/trap.c	/^clockintr()$/;"	f
close	gradelib.py	/^    def close(self):$/;"	m	class:GDBClient
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	user/sh.c	/^struct cmd {$/;"	s	file:
color	gradelib.py	/^def color(name, text):$/;"	f
commit	kernel/log.c	/^commit()$/;"	f	file:
committing	kernel/log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	user/usertests.c	/^concreate(char *s)$/;"	f
cons	kernel/console.c	/^} cons;$/;"	v	typeref:struct:__anon3
consoleinit	kernel/console.c	/^consoleinit(void)$/;"	f
consoleintr	kernel/console.c	/^consoleintr(int c)$/;"	f
consoleread	kernel/console.c	/^consoleread(int user_dst, uint64 dst, int n)$/;"	f
consolewrite	kernel/console.c	/^consolewrite(int user_src, uint64 src, int n)$/;"	f
consputc	kernel/console.c	/^consputc(int c)$/;"	f
cont	gradelib.py	/^    def cont(self):$/;"	m	class:GDBClient
context	gradelib.py	/^        class context:$/;"	c	function:shell_script.setup_call_on_line
context	kernel/proc.h	/^  struct context context;      \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	kernel/proc.h	/^  struct context context;     \/\/ swtch() here to enter scheduler().$/;"	m	struct:cpu	typeref:struct:cpu::context
context	kernel/proc.h	/^struct context {$/;"	s
copyin	kernel/vm.c	/^copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)$/;"	f
copyin	user/usertests.c	/^copyin(char *s)$/;"	f
copyinstr	kernel/vm.c	/^copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)$/;"	f
copyinstr1	user/usertests.c	/^copyinstr1(char *s)$/;"	f
copyinstr2	user/usertests.c	/^copyinstr2(char *s)$/;"	f
copyinstr3	user/usertests.c	/^copyinstr3(char *s)$/;"	f
copyout	kernel/vm.c	/^copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)$/;"	f
copyout	user/usertests.c	/^copyout(char *s)$/;"	f
countfree	user/usertests.c	/^countfree()$/;"	f
cpu	kernel/proc.h	/^struct cpu {$/;"	s
cpu	kernel/spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpuid	kernel/proc.c	/^cpuid()$/;"	f
cpus	kernel/proc.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
create	kernel/sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	user/usertests.c	/^createdelete(char *s)$/;"	f
createtest	user/usertests.c	/^createtest(char *s)$/;"	f
cwd	kernel/proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
data	kernel/buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	kernel/pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	kernel/date.h	/^  uint day;$/;"	m	struct:rtcdate
desc	kernel/virtio_disk.c	/^  struct VRingDesc *desc;$/;"	m	struct:disk	typeref:struct:disk::VRingDesc	file:
dev	kernel/buf.h	/^  uint dev;$/;"	m	struct:buf
dev	kernel/file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	kernel/log.c	/^  int dev;$/;"	m	struct:log	file:
dev	kernel/stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devintr	kernel/trap.c	/^devintr()$/;"	f
devsw	kernel/file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	kernel/file.h	/^struct devsw {$/;"	s
digits	kernel/printf.c	/^static char digits[] = "0123456789abcdef";$/;"	v	file:
digits	user/printf.c	/^static char digits[] = "0123456789ABCDEF";$/;"	v	file:
dinode	kernel/fs.h	/^struct dinode {$/;"	s
dirent	kernel/fs.h	/^struct dirent {$/;"	s
dirfile	user/usertests.c	/^dirfile(char *s)$/;"	f
dirlink	kernel/fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	kernel/fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	user/usertests.c	/^void dirtest(char *s)$/;"	f
disk	kernel/buf.h	/^  int disk;    \/\/ does disk "own" buf?$/;"	m	struct:buf
disk	kernel/virtio_disk.c	/^static struct disk {$/;"	s	file:
disk	kernel/virtio_disk.c	/^} __attribute__ ((aligned (PGSIZE))) disk;$/;"	v	typeref:struct:disk	file:
do_rand	user/grind.c	/^do_rand(unsigned long *ctx)$/;"	f
e	kernel/console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon3	file:
eargv	user/sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
efile	user/sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
ehsize	kernel/elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
either_copyin	kernel/proc.c	/^either_copyin(void *dst, int user_src, uint64 src, uint64 len)$/;"	f
either_copyout	kernel/proc.c	/^either_copyout(int user_dst, uint64 dst, void *src, uint64 len)$/;"	f
elems	kernel/virtio.h	/^  struct VRingUsedElem elems[NUM];$/;"	m	struct:UsedArea	typeref:struct:UsedArea::VRingUsedElem
elf	kernel/elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	kernel/elf.h	/^struct elfhdr {$/;"	s
end_op	kernel/log.c	/^end_op(void)$/;"	f
end_part	gradelib.py	/^def end_part(name):$/;"	f
entry	kernel/elf.h	/^  uint64 entry;$/;"	m	struct:elfhdr
entry	user/usys.pl	/^sub entry {$/;"	s
epc	kernel/proc.h	/^  \/*  24 *\/ uint64 epc;           \/\/ saved user program counter$/;"	m	struct:trapframe
exec	kernel/exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	user/sh.c	/^execcmd(void)$/;"	f
execcmd	user/sh.c	/^struct execcmd {$/;"	s	file:
execout	user/usertests.c	/^execout(char *s)$/;"	f
exectest	user/usertests.c	/^exectest(char *s)$/;"	f
exit	kernel/proc.c	/^exit(int status)$/;"	f
exit	user/initcode.S	/^exit:$/;"	l
exitiputtest	user/usertests.c	/^exitiputtest(char *s)$/;"	f
exitwait	user/usertests.c	/^exitwait(char *s)$/;"	f
fd	user/sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fdalloc	kernel/sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fetchaddr	kernel/syscall.c	/^fetchaddr(uint64 addr, uint64 *ip)$/;"	f
fetchstr	kernel/syscall.c	/^fetchstr(uint64 addr, char *buf, int max)$/;"	f
file	kernel/file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon5	typeref:struct:__anon5::file	file:
file	kernel/file.h	/^struct file {$/;"	s
file	user/sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	kernel/file.c	/^filealloc(void)$/;"	f
fileclose	kernel/file.c	/^fileclose(struct file *f)$/;"	f
filedup	kernel/file.c	/^filedup(struct file *f)$/;"	f
fileinit	kernel/file.c	/^fileinit(void)$/;"	f
fileno	gradelib.py	/^    def fileno(self):$/;"	f
fileno	gradelib.py	/^    def fileno(self):$/;"	m	class:GDBClient
fileread	kernel/file.c	/^fileread(struct file *f, uint64 addr, int n)$/;"	f
filestat	kernel/file.c	/^filestat(struct file *f, uint64 addr)$/;"	f
filesz	kernel/elf.h	/^  uint64 filesz;$/;"	m	struct:proghdr
filewrite	kernel/file.c	/^filewrite(struct file *f, uint64 addr, int n)$/;"	f
flags	kernel/elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	kernel/elf.h	/^  uint32 flags;$/;"	m	struct:proghdr
flags	kernel/virtio.h	/^  uint16 flags;$/;"	m	struct:UsedArea
flags	kernel/virtio.h	/^  uint16 flags;$/;"	m	struct:VRingDesc
fmtname	user/ls.c	/^fmtname(char *path)$/;"	f
fork	kernel/proc.c	/^fork(void)$/;"	f
fork1	user/sh.c	/^fork1(void)$/;"	f
forkfork	user/usertests.c	/^forkfork(char *s)$/;"	f
forkforkfork	user/usertests.c	/^forkforkfork(char *s)$/;"	f
forkret	kernel/proc.c	/^forkret(void)$/;"	f
forktest	user/forktest.c	/^forktest(void)$/;"	f
forktest	user/usertests.c	/^forktest(char *s)$/;"	f
fourfiles	user/usertests.c	/^fourfiles(char *s)$/;"	f
fourteen	user/usertests.c	/^fourteen(char *s)$/;"	f
fprintf	user/printf.c	/^fprintf(int fd, const char *fmt, ...)$/;"	f
free	kernel/virtio_disk.c	/^  char free[NUM];  \/\/ is a descriptor free?$/;"	m	struct:disk	file:
free	user/umalloc.c	/^free(void *ap)$/;"	f
free_chain	kernel/virtio_disk.c	/^free_chain(int i)$/;"	f	file:
free_desc	kernel/virtio_disk.c	/^free_desc(int i)$/;"	f	file:
freeblock	mkfs/mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs/mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kernel/kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon6	typeref:struct:__anon6::run	file:
freep	user/umalloc.c	/^static Header *freep;$/;"	v	file:
freeproc	kernel/proc.c	/^freeproc(struct proc *p)$/;"	f	file:
freerange	kernel/kalloc.c	/^freerange(void *pa_start, void *pa_end)$/;"	f
freewalk	kernel/vm.c	/^freewalk(pagetable_t pagetable)$/;"	f
fsfd	mkfs/mkfs.c	/^int fsfd;$/;"	v
fsfull	user/usertests.c	/^fsfull()$/;"	f
fsinit	kernel/fs.c	/^fsinit(int dev) {$/;"	f
ftable	kernel/file.c	/^} ftable;$/;"	v	typeref:struct:__anon5
get_current_test	gradelib.py	/^def get_current_test():$/;"	f
get_gdb_port	gradelib.py	/^    def get_gdb_port():$/;"	f
getcmd	user/sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	user/ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	user/sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
go	user/grind.c	/^go(int which_child)$/;"	f
gp	kernel/proc.h	/^  \/*  56 *\/ uint64 gp;$/;"	m	struct:trapframe
grep	user/grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	kernel/proc.c	/^growproc(int n)$/;"	f
handle_output	gradelib.py	/^        def handle_output(output):$/;"	f	function:call_on_line.setup_call_on_line
handle_output	gradelib.py	/^        def handle_output(output):$/;"	f	function:shell_script.setup_call_on_line
handle_read	gradelib.py	/^    def handle_read(self):$/;"	f
handle_read	gradelib.py	/^    def handle_read(self):$/;"	m	class:GDBClient
head	kernel/bio.c	/^  struct buf head;$/;"	m	struct:__anon7	typeref:struct:__anon7::buf	file:
header	user/umalloc.c	/^union header {$/;"	u	file:
holding	kernel/spinlock.c	/^holding(struct spinlock *lk)$/;"	f
holdingsleep	kernel/sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	kernel/date.h	/^  uint hour;$/;"	m	struct:rtcdate
ialloc	kernel/fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs/mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs/mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	kernel/fs.c	/^} icache;$/;"	v	typeref:struct:__anon4
id	kernel/virtio.h	/^  uint16 id;$/;"	m	struct:UsedArea
id	kernel/virtio.h	/^  uint32 id;   \/\/ index of start of completed descriptor chain$/;"	m	struct:VRingUsedElem
idup	kernel/fs.c	/^idup(struct inode *ip)$/;"	f
iget	kernel/fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	kernel/fs.c	/^iinit()$/;"	f
ilock	kernel/fs.c	/^ilock(struct inode *ip)$/;"	f
info	kernel/virtio_disk.c	/^  } info[NUM];$/;"	m	struct:disk	typeref:struct:disk::__anon8	file:
init	user/initcode.S	/^init:$/;"	l
initcode	kernel/proc.c	/^uchar initcode[] = {$/;"	v
initlock	kernel/spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	kernel/log.c	/^initlog(int dev, struct superblock *sb)$/;"	f
initproc	kernel/proc.c	/^struct proc *initproc;$/;"	v	typeref:struct:proc
initsleeplock	kernel/sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
ino	kernel/stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	kernel/file.h	/^struct inode {$/;"	s
inode	kernel/fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon4	typeref:struct:__anon4::inode	file:
inodestart	kernel/fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
install_trans	kernel/log.c	/^install_trans(void)$/;"	f	file:
intena	kernel/proc.h	/^  int intena;                 \/\/ Were interrupts enabled before push_off()?$/;"	m	struct:cpu
intr_get	kernel/riscv.h	/^intr_get()$/;"	f
intr_off	kernel/riscv.h	/^intr_off()$/;"	f
intr_on	kernel/riscv.h	/^intr_on()$/;"	f
inum	kernel/file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	kernel/fs.h	/^  ushort inum;$/;"	m	struct:dirent
ip	kernel/file.h	/^  struct inode *ip;  \/\/ FD_INODE and FD_DEVICE$/;"	m	struct:file	typeref:struct:file::inode
iput	kernel/fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	user/usertests.c	/^iputtest(char *s)$/;"	f
iref	user/usertests.c	/^iref(char *s)$/;"	f
isdirempty	kernel/sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
iter	user/grind.c	/^iter()$/;"	f
itrunc	kernel/fs.c	/^itrunc(struct inode *ip)$/;"	f
iunlock	kernel/fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	kernel/fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	kernel/fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kernel/kalloc.c	/^kalloc(void)$/;"	f
kernel_hartid	kernel/proc.h	/^  \/*  32 *\/ uint64 kernel_hartid; \/\/ saved kernel tp$/;"	m	struct:trapframe
kernel_pagetable	kernel/vm.c	/^pagetable_t kernel_pagetable;$/;"	v
kernel_satp	kernel/proc.h	/^  \/*   0 *\/ uint64 kernel_satp;   \/\/ kernel page table$/;"	m	struct:trapframe
kernel_sp	kernel/proc.h	/^  \/*   8 *\/ uint64 kernel_sp;     \/\/ top of process's kernel stack$/;"	m	struct:trapframe
kernel_trap	kernel/proc.h	/^  \/*  16 *\/ uint64 kernel_trap;   \/\/ usertrap()$/;"	m	struct:trapframe
kerneltrap	kernel/trap.c	/^kerneltrap()$/;"	f
kernelvec	kernel/kernelvec.S	/^kernelvec:$/;"	l
kernmem	user/usertests.c	/^kernmem(char *s)$/;"	f
kfree	kernel/kalloc.c	/^kfree(void *pa)$/;"	f
kill	gradelib.py	/^    def kill(self):$/;"	f
kill	kernel/proc.c	/^kill(int pid)$/;"	f
killed	kernel/proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit	kernel/kalloc.c	/^kinit()$/;"	f
kmem	kernel/kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon6
kstack	kernel/proc.h	/^  uint64 kstack;               \/\/ Virtual address of kernel stack$/;"	m	struct:proc
kvminit	kernel/vm.c	/^kvminit()$/;"	f
kvminithart	kernel/vm.c	/^kvminithart()$/;"	f
kvmmap	kernel/vm.c	/^kvmmap(uint64 va, uint64 pa, uint64 sz, int perm)$/;"	f
kvmpa	kernel/vm.c	/^kvmpa(uint64 va)$/;"	f
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel/virtio.h	/^  uint32 len;$/;"	m	struct:VRingDesc
len	kernel/virtio.h	/^  uint32 len;$/;"	m	struct:VRingUsedElem
lh	kernel/log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
linktest	user/usertests.c	/^linktest(char *s)$/;"	f
linkunlink	user/usertests.c	/^linkunlink(char *s)$/;"	f
listcmd	user/sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	user/sh.c	/^struct listcmd {$/;"	s	file:
lk	kernel/sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
loadseg	kernel/exec.c	/^loadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz)$/;"	f	file:
lock	kernel/bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	kernel/buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	kernel/console.c	/^  struct spinlock lock;$/;"	m	struct:__anon3	typeref:struct:__anon3::spinlock	file:
lock	kernel/file.c	/^  struct spinlock lock;$/;"	m	struct:__anon5	typeref:struct:__anon5::spinlock	file:
lock	kernel/file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	kernel/fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	kernel/kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	kernel/log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	kernel/pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	kernel/printf.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	kernel/proc.h	/^  struct spinlock lock;$/;"	m	struct:proc	typeref:struct:proc::spinlock
locked	kernel/sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	kernel/spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	kernel/printf.c	/^  int locking;$/;"	m	struct:__anon2	file:
log	kernel/log.c	/^struct log log;$/;"	v	typeref:struct:log
log	kernel/log.c	/^struct log {$/;"	s	file:
log_write	kernel/log.c	/^log_write(struct buf *b)$/;"	f
logheader	kernel/log.c	/^struct logheader {$/;"	s	file:
logstart	kernel/fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	user/ls.c	/^ls(char *path)$/;"	f
machine	kernel/elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	kernel/elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
magic	kernel/fs.h	/^  uint magic;        \/\/ Must be FSMAGIC$/;"	m	struct:superblock
main	kernel/main.c	/^main()$/;"	f
main	mkfs/mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	user/cat.c	/^main(int argc, char *argv[])$/;"	f
main	user/echo.c	/^main(int argc, char *argv[])$/;"	f
main	user/forktest.c	/^main(void)$/;"	f
main	user/grep.c	/^main(int argc, char *argv[])$/;"	f
main	user/grind.c	/^main()$/;"	f
main	user/init.c	/^main(void)$/;"	f
main	user/kill.c	/^main(int argc, char **argv)$/;"	f
main	user/lazytests.c	/^main(int argc, char *argv[])$/;"	f
main	user/ln.c	/^main(int argc, char *argv[])$/;"	f
main	user/ls.c	/^main(int argc, char *argv[])$/;"	f
main	user/mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	user/rm.c	/^main(int argc, char *argv[])$/;"	f
main	user/sh.c	/^main(void)$/;"	f
main	user/stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	user/usertests.c	/^main(int argc, char *argv[])$/;"	f
main	user/wc.c	/^main(int argc, char *argv[])$/;"	f
main	user/zombie.c	/^main(void)$/;"	f
major	kernel/file.h	/^  short major;       \/\/ FD_DEVICE$/;"	m	struct:file
major	kernel/file.h	/^  short major;$/;"	m	struct:inode
major	kernel/file.h	12;"	d
major	kernel/fs.h	/^  short major;          \/\/ Major device number (T_DEVICE only)$/;"	m	struct:dinode
make	gradelib.py	/^def make(*target):$/;"	f
malloc	user/umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	kernel/vm.c	/^mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)$/;"	f
match	gradelib.py	/^    def match(self, *args, **kwargs):$/;"	m	class:Runner
match	user/grep.c	/^match(char *re, char *text)$/;"	f
matchhere	user/grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	user/grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maybe_unlink	gradelib.py	/^def maybe_unlink(*paths):$/;"	f
mem	user/usertests.c	/^mem(char *s)$/;"	f
memcmp	kernel/string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcmp	user/ulib.c	/^memcmp(const void *s1, const void *s2, uint n)$/;"	f
memcpy	kernel/string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memcpy	user/ulib.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memmove	kernel/string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	user/ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f
memset	kernel/string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	user/ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	kernel/elf.h	/^  uint64 memsz;$/;"	m	struct:proghdr
min	kernel/fs.c	24;"	d	file:
min	mkfs/mkfs.c	261;"	d	file:
minor	kernel/file.h	/^  short minor;$/;"	m	struct:inode
minor	kernel/file.h	13;"	d
minor	kernel/fs.h	/^  short minor;          \/\/ Minor device number (T_DEVICE only)$/;"	m	struct:dinode
minute	kernel/date.h	/^  uint minute;$/;"	m	struct:rtcdate
mkdev	kernel/file.h	14;"	d
mode	user/sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	kernel/date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	user/umalloc.c	/^morecore(uint nu)$/;"	f	file:
mscratch0	kernel/start.c	/^uint64 mscratch0[NCPU * 32];$/;"	v
mycpu	kernel/proc.c	/^mycpu(void) {$/;"	f
myproc	kernel/proc.c	/^myproc(void) {$/;"	f
n	gradelib.py	/^            n = 0$/;"	v	class:shell_script.setup_call_on_line.context
n	kernel/log.c	/^  int n;$/;"	m	struct:logheader	file:
name	kernel/fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	kernel/proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	kernel/sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	kernel/spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	user/usertests.c	/^char name[3];$/;"	v
namecmp	kernel/fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	kernel/fs.c	/^namei(char *path)$/;"	f
nameiparent	kernel/fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	kernel/fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs/mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	kernel/fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs/mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
next	kernel/buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kernel/kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
next	kernel/virtio.h	/^  uint16 next;$/;"	m	struct:VRingDesc
nextpid	kernel/proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	mkfs/mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	kernel/fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	kernel/file.h	/^  short nlink;$/;"	m	struct:inode
nlink	kernel/fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	kernel/stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	kernel/fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs/mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs/mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
noff	kernel/proc.h	/^  int noff;                   \/\/ Depth of push_off() nesting.$/;"	m	struct:cpu
nread	kernel/pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nulterminate	user/sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
nwrite	kernel/pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
off	kernel/elf.h	/^  uint64 off;$/;"	m	struct:proghdr
off	kernel/file.h	/^  uint off;          \/\/ FD_INODE$/;"	m	struct:file
ofile	kernel/proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oom	user/lazytests.c	/^oom(char *s)$/;"	f
openiputtest	user/usertests.c	/^openiputtest(char *s)$/;"	f
opentest	user/usertests.c	/^opentest(char *s)$/;"	f
outstanding	kernel/log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
paddr	kernel/elf.h	/^  uint64 paddr;$/;"	m	struct:proghdr
pages	kernel/virtio_disk.c	/^  char pages[2*PGSIZE];$/;"	m	struct:disk	file:
pagetable	kernel/proc.h	/^  pagetable_t pagetable;       \/\/ User page table$/;"	m	struct:proc
pagetable_t	kernel/riscv.h	/^typedef uint64 *pagetable_t; \/\/ 512 PTEs$/;"	t
panic	kernel/printf.c	/^panic(char *s)$/;"	f
panic	user/sh.c	/^panic(char *s)$/;"	f
panicked	kernel/printf.c	/^volatile int panicked = 0;$/;"	v
parent	kernel/proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	user/sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	user/sh.c	/^parsecmd(char *s)$/;"	f
parseexec	user/sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	user/sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	user/sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	user/sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pde_t	kernel/types.h	/^typedef uint64 pde_t;$/;"	t
peek	user/sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
pgbug	user/usertests.c	/^pgbug(char *s)$/;"	f
phentsize	kernel/elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	kernel/elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	kernel/elf.h	/^  uint64 phoff;$/;"	m	struct:elfhdr
pid	kernel/proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	kernel/sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid_lock	kernel/proc.c	/^struct spinlock pid_lock;$/;"	v	typeref:struct:spinlock
pipe	kernel/file.h	/^  struct pipe *pipe; \/\/ FD_PIPE$/;"	m	struct:file	typeref:struct:file::pipe
pipe	kernel/pipe.c	/^struct pipe {$/;"	s	file:
pipe1	user/usertests.c	/^pipe1(char *s)$/;"	f
pipealloc	kernel/pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	kernel/pipe.c	/^pipeclose(struct pipe *pi, int writable)$/;"	f
pipecmd	user/sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	user/sh.c	/^struct pipecmd {$/;"	s	file:
piperead	kernel/pipe.c	/^piperead(struct pipe *pi, uint64 addr, int n)$/;"	f
pipewrite	kernel/pipe.c	/^pipewrite(struct pipe *pi, uint64 addr, int n)$/;"	f
plic_claim	kernel/plic.c	/^plic_claim(void)$/;"	f
plic_complete	kernel/plic.c	/^plic_complete(int irq)$/;"	f
plicinit	kernel/plic.c	/^plicinit(void)$/;"	f
plicinithart	kernel/plic.c	/^plicinithart(void)$/;"	f
pop_off	kernel/spinlock.c	/^pop_off(void)$/;"	f
post_make	gradelib.py	/^def post_make():$/;"	f
pr	kernel/printf.c	/^} pr;$/;"	v	typeref:struct:__anon2	file:
pre_make	gradelib.py	/^def pre_make():$/;"	f
preempt	user/usertests.c	/^preempt(char *s)$/;"	f
prev	kernel/buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
print	user/forktest.c	/^print(const char *s)$/;"	f
printf	kernel/printf.c	/^printf(char *fmt, ...)$/;"	f
printf	user/printf.c	/^printf(const char *fmt, ...)$/;"	f
printfinit	kernel/printf.c	/^printfinit(void)$/;"	f
printint	kernel/printf.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	user/printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
printptr	kernel/printf.c	/^printptr(uint64 x)$/;"	f	file:
printptr	user/printf.c	/^printptr(int fd, uint64 x) {$/;"	f	file:
proc	kernel/proc.c	/^struct proc proc[NPROC];$/;"	v	typeref:struct:proc
proc	kernel/proc.h	/^  struct proc *proc;          \/\/ The process running on this cpu, or null.$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	kernel/proc.h	/^struct proc {$/;"	s
proc_freepagetable	kernel/proc.c	/^proc_freepagetable(pagetable_t pagetable, uint64 sz)$/;"	f
proc_pagetable	kernel/proc.c	/^proc_pagetable(struct proc *p)$/;"	f
procdump	kernel/proc.c	/^procdump(void)$/;"	f
procinit	kernel/proc.c	/^procinit(void)$/;"	f
procstate	kernel/proc.h	/^enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
proghdr	kernel/elf.h	/^struct proghdr {$/;"	s
pte_t	kernel/riscv.h	/^typedef uint64 pte_t;$/;"	t
ptr	user/umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon1	typeref:union:header::__anon1::header	file:
push_off	kernel/spinlock.c	/^push_off(void)$/;"	f
putc	user/printf.c	/^putc(int fd, char c)$/;"	f	file:
r	kernel/console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon3	file:
r_mcounteren	kernel/riscv.h	/^r_mcounteren()$/;"	f
r_medeleg	kernel/riscv.h	/^r_medeleg()$/;"	f
r_mhartid	kernel/riscv.h	/^r_mhartid()$/;"	f
r_mideleg	kernel/riscv.h	/^r_mideleg()$/;"	f
r_mie	kernel/riscv.h	/^r_mie()$/;"	f
r_mstatus	kernel/riscv.h	/^r_mstatus()$/;"	f
r_ra	kernel/riscv.h	/^r_ra()$/;"	f
r_satp	kernel/riscv.h	/^r_satp()$/;"	f
r_scause	kernel/riscv.h	/^r_scause()$/;"	f
r_sepc	kernel/riscv.h	/^r_sepc()$/;"	f
r_sie	kernel/riscv.h	/^r_sie()$/;"	f
r_sip	kernel/riscv.h	/^r_sip()$/;"	f
r_sp	kernel/riscv.h	/^r_sp()$/;"	f
r_sstatus	kernel/riscv.h	/^r_sstatus()$/;"	f
r_stval	kernel/riscv.h	/^r_stval()$/;"	f
r_stvec	kernel/riscv.h	/^r_stvec()$/;"	f
r_time	kernel/riscv.h	/^r_time()$/;"	f
r_tp	kernel/riscv.h	/^r_tp()$/;"	f
ra	kernel/proc.h	/^  \/*  40 *\/ uint64 ra;$/;"	m	struct:trapframe
ra	kernel/proc.h	/^  uint64 ra;$/;"	m	struct:context
ramdiskinit	kernel/ramdisk.c	/^ramdiskinit(void)$/;"	f
ramdiskrw	kernel/ramdisk.c	/^ramdiskrw(struct buf *b)$/;"	f
rand	user/grind.c	/^rand(void)$/;"	f
rand	user/usertests.c	/^rand()$/;"	f
rand_next	user/grind.c	/^unsigned long rand_next = 1;$/;"	v
random_str	gradelib.py	/^def random_str(n=8):$/;"	f
randstate	user/usertests.c	/^unsigned long randstate = 1;$/;"	v
read	kernel/file.h	/^  int (*read)(int, uint64, int);$/;"	m	struct:devsw
read_head	kernel/log.c	/^read_head(void)$/;"	f	file:
readable	kernel/file.h	/^  char readable;$/;"	m	struct:file
readi	kernel/fs.c	/^readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)$/;"	f
readopen	kernel/pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	kernel/fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	file:
recover_from_log	kernel/log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	user/sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	user/sh.c	/^struct redircmd {$/;"	s	file:
ref	kernel/file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	kernel/file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
refcnt	kernel/buf.h	/^  uint refcnt;$/;"	m	struct:buf
register_test	gradelib.py	/^    def register_test(fn, title=title):$/;"	f	function:test
release	kernel/spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	kernel/sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reparent	kernel/proc.c	/^reparent(struct proc *p)$/;"	f
reparent	user/usertests.c	/^reparent(char *s)$/;"	f
reparent2	user/usertests.c	/^reparent2(char *s)$/;"	f
reset_fs	gradelib.py	/^def reset_fs():$/;"	f
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs/mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	user/usertests.c	/^rmdot(char *s)$/;"	f
rsect	mkfs/mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rtcdate	kernel/date.h	/^struct rtcdate {$/;"	s
run	kernel/kalloc.c	/^struct run {$/;"	s	file:
run	user/lazytests.c	/^run(void f(char *), char *s) {$/;"	f
run	user/usertests.c	/^run(void f(char *), char *s) {$/;"	f
run_qemu	gradelib.py	/^    def run_qemu(self, *monitors, **kw):$/;"	m	class:Runner
run_qemu_kw	gradelib.py	/^        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):$/;"	f	function:Runner.run_qemu
run_test	gradelib.py	/^        def run_test():$/;"	f	function:test.register_test
run_tests	gradelib.py	/^def run_tests():$/;"	f
runcmd	user/sh.c	/^runcmd(struct cmd *cmd)$/;"	f
rwsbrk	user/usertests.c	/^rwsbrk()$/;"	f
s	user/umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon1	file:
s0	kernel/proc.h	/^  \/*  96 *\/ uint64 s0;$/;"	m	struct:trapframe
s0	kernel/proc.h	/^  uint64 s0;$/;"	m	struct:context
s1	kernel/proc.h	/^  \/* 104 *\/ uint64 s1;$/;"	m	struct:trapframe
s1	kernel/proc.h	/^  uint64 s1;$/;"	m	struct:context
s10	kernel/proc.h	/^  \/* 240 *\/ uint64 s10;$/;"	m	struct:trapframe
s10	kernel/proc.h	/^  uint64 s10;$/;"	m	struct:context
s11	kernel/proc.h	/^  \/* 248 *\/ uint64 s11;$/;"	m	struct:trapframe
s11	kernel/proc.h	/^  uint64 s11;$/;"	m	struct:context
s2	kernel/proc.h	/^  \/* 176 *\/ uint64 s2;$/;"	m	struct:trapframe
s2	kernel/proc.h	/^  uint64 s2;$/;"	m	struct:context
s3	kernel/proc.h	/^  \/* 184 *\/ uint64 s3;$/;"	m	struct:trapframe
s3	kernel/proc.h	/^  uint64 s3;$/;"	m	struct:context
s4	kernel/proc.h	/^  \/* 192 *\/ uint64 s4;$/;"	m	struct:trapframe
s4	kernel/proc.h	/^  uint64 s4;$/;"	m	struct:context
s5	kernel/proc.h	/^  \/* 200 *\/ uint64 s5;$/;"	m	struct:trapframe
s5	kernel/proc.h	/^  uint64 s5;$/;"	m	struct:context
s6	kernel/proc.h	/^  \/* 208 *\/ uint64 s6;$/;"	m	struct:trapframe
s6	kernel/proc.h	/^  uint64 s6;$/;"	m	struct:context
s7	kernel/proc.h	/^  \/* 216 *\/ uint64 s7;$/;"	m	struct:trapframe
s7	kernel/proc.h	/^  uint64 s7;$/;"	m	struct:context
s8	kernel/proc.h	/^  \/* 224 *\/ uint64 s8;$/;"	m	struct:trapframe
s8	kernel/proc.h	/^  uint64 s8;$/;"	m	struct:context
s9	kernel/proc.h	/^  \/* 232 *\/ uint64 s9;$/;"	m	struct:trapframe
s9	kernel/proc.h	/^  uint64 s9;$/;"	m	struct:context
safestrcpy	kernel/string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
save	gradelib.py	/^def save(path):$/;"	f
save_on_finish	gradelib.py	/^    def save_on_finish(fail):$/;"	f	function:save
sb	kernel/fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	mkfs/mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrkarg	user/usertests.c	/^sbrkarg(char *s)$/;"	f
sbrkbasic	user/usertests.c	/^sbrkbasic(char *s)$/;"	f
sbrkbugs	user/usertests.c	/^sbrkbugs(char *s)$/;"	f
sbrkfail	user/usertests.c	/^sbrkfail(char *s)$/;"	f
sbrkmuch	user/usertests.c	/^sbrkmuch(char *s)$/;"	f
sched	kernel/proc.c	/^sched(void)$/;"	f
scheduler	kernel/proc.c	/^scheduler(void)$/;"	f
second	kernel/date.h	/^  uint second;$/;"	m	struct:rtcdate
setup_breakpoint	gradelib.py	/^    def setup_breakpoint(runner):$/;"	f	function:stop_breakpoint
setup_call_on_line	gradelib.py	/^    def setup_call_on_line(runner):$/;"	f	function:call_on_line
setup_call_on_line	gradelib.py	/^    def setup_call_on_line(runner):$/;"	f	function:shell_script
setup_save	gradelib.py	/^    def setup_save(runner):$/;"	f	function:save
sfence_vma	kernel/riscv.h	/^sfence_vma()$/;"	f
sharedfd	user/usertests.c	/^sharedfd(char *s)$/;"	f
shell_script	gradelib.py	/^def shell_script(script, terminate_match=None):$/;"	f
shentsize	kernel/elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shnum	kernel/elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	kernel/elf.h	/^  uint64 shoff;$/;"	m	struct:elfhdr
show_command	gradelib.py	/^def show_command(cmd):$/;"	f
show_part	gradelib.py	/^    def show_part():$/;"	f	function:end_part
shstrndx	kernel/elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
size	kernel/file.h	/^  uint size;$/;"	m	struct:inode
size	kernel/fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	kernel/fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	kernel/log.c	/^  int size;$/;"	m	struct:log	file:
size	kernel/stat.h	/^  uint64 size; \/\/ Size of file in bytes$/;"	m	struct:stat
size	user/umalloc.c	/^    uint size;$/;"	m	struct:header::__anon1	file:
skipelem	kernel/fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	kernel/proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	kernel/sleeplock.h	/^struct sleeplock {$/;"	s
sp	kernel/proc.h	/^  \/*  48 *\/ uint64 sp;$/;"	m	struct:trapframe
sp	kernel/proc.h	/^  uint64 sp;$/;"	m	struct:context
sparse_memory	user/lazytests.c	/^sparse_memory(char *s)$/;"	f
sparse_memory_unmap	user/lazytests.c	/^sparse_memory_unmap(char *s)$/;"	f
spin	kernel/entry.S	/^spin:$/;"	l
spinlock	kernel/spinlock.h	/^struct spinlock {$/;"	s
stack0	kernel/start.c	/^__attribute__ ((aligned (16))) char stack0[4096 * NCPU];$/;"	v
stacktest	user/usertests.c	/^stacktest(char *s)$/;"	f
start	kernel/log.c	/^  int start;$/;"	m	struct:log	file:
start	kernel/start.c	/^start()$/;"	f
start	user/initcode.S	/^start:$/;"	l
started	kernel/main.c	/^volatile static int started = 0;$/;"	v	file:
stat	kernel/stat.h	/^struct stat {$/;"	s
stat	mkfs/mkfs.c	8;"	d	file:
stat	user/ulib.c	/^stat(const char *n, struct stat *st)$/;"	f
state	kernel/proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
stati	kernel/fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static_assert	mkfs/mkfs.c	15;"	d	file:
status	kernel/virtio_disk.c	/^    char status;$/;"	m	struct:disk::__anon8	file:
stop	gradelib.py	/^    def stop(line):$/;"	f	function:stop_on_line
stop_breakpoint	gradelib.py	/^def stop_breakpoint(addr):$/;"	f
stop_on_line	gradelib.py	/^def stop_on_line(regexp):$/;"	f
strchr	user/ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	user/ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	user/ulib.c	/^strcpy(char *s, const char *t)$/;"	f
strlen	kernel/string.c	/^strlen(const char *s)$/;"	f
strlen	user/ulib.c	/^strlen(const char *s)$/;"	f
strncmp	kernel/string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	kernel/string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
subdir	user/usertests.c	/^subdir(char *s)$/;"	f
superblock	kernel/fs.h	/^struct superblock {$/;"	s
swtch	kernel/swtch.S	/^swtch:$/;"	l
symbols	user/sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	kernel/sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	kernel/sysfile.c	/^sys_close(void)$/;"	f
sys_dup	kernel/sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	kernel/sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	kernel/sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	kernel/sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	kernel/sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	kernel/sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	kernel/sysproc.c	/^sys_kill(void)$/;"	f
sys_link	kernel/sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	kernel/sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	kernel/sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	kernel/sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	kernel/sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	kernel/sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	kernel/sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	kernel/sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	kernel/sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	kernel/sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	kernel/sysproc.c	/^sys_wait(void)$/;"	f
sys_write	kernel/sysfile.c	/^sys_write(void)$/;"	f
syscall	kernel/syscall.c	/^syscall(void)$/;"	f
syscalls	kernel/syscall.c	/^static uint64 (*syscalls[])(void) = {$/;"	v	file:
sz	kernel/proc.h	/^  uint64 sz;                   \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t0	kernel/proc.h	/^  \/*  72 *\/ uint64 t0;$/;"	m	struct:trapframe
t1	kernel/proc.h	/^  \/*  80 *\/ uint64 t1;$/;"	m	struct:trapframe
t2	kernel/proc.h	/^  \/*  88 *\/ uint64 t2;$/;"	m	struct:trapframe
t3	kernel/proc.h	/^  \/* 256 *\/ uint64 t3;$/;"	m	struct:trapframe
t4	kernel/proc.h	/^  \/* 264 *\/ uint64 t4;$/;"	m	struct:trapframe
t5	kernel/proc.h	/^  \/* 272 *\/ uint64 t5;$/;"	m	struct:trapframe
t6	kernel/proc.h	/^  \/* 280 *\/ uint64 t6;$/;"	m	struct:trapframe
test	gradelib.py	/^def test(points, title=None, parent=None):$/;"	f
ticks	kernel/trap.c	/^uint ticks;$/;"	v
tickslock	kernel/trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
timerinit	kernel/start.c	/^timerinit()$/;"	f
timervec	kernel/kernelvec.S	/^timervec:$/;"	l
tp	kernel/proc.h	/^  \/*  64 *\/ uint64 tp;$/;"	m	struct:trapframe
trampoline	kernel/trampoline.S	/^trampoline:$/;"	l
trapframe	kernel/proc.h	/^  struct trapframe *trapframe; \/\/ data page for trampoline.S$/;"	m	struct:proc	typeref:struct:proc::trapframe
trapframe	kernel/proc.h	/^struct trapframe {$/;"	s
trapinit	kernel/trap.c	/^trapinit(void)$/;"	f
trapinithart	kernel/trap.c	/^trapinithart(void)$/;"	f
truncate1	user/usertests.c	/^truncate1(char *s)$/;"	f
truncate2	user/usertests.c	/^truncate2(char *s)$/;"	f
truncate3	user/usertests.c	/^truncate3(char *s)$/;"	f
twochildren	user/usertests.c	/^twochildren(char *s)$/;"	f
type	kernel/elf.h	/^  uint32 type;$/;"	m	struct:proghdr
type	kernel/elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;$/;"	m	struct:file	typeref:enum:file::__anon9
type	kernel/file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	kernel/fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	kernel/stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
type	user/sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:redircmd	file:
uart_tx_buf	kernel/uart.c	/^char uart_tx_buf[UART_TX_BUF_SIZE];$/;"	v
uart_tx_lock	kernel/uart.c	/^struct spinlock uart_tx_lock;$/;"	v	typeref:struct:spinlock
uart_tx_r	kernel/uart.c	/^int uart_tx_r; \/\/ read next from uart_tx_buf[uar_tx_r++]$/;"	v
uart_tx_w	kernel/uart.c	/^int uart_tx_w; \/\/ write next to uart_tx_buf[uart_tx_w++]$/;"	v
uartgetc	kernel/uart.c	/^uartgetc(void)$/;"	f
uartinit	kernel/uart.c	/^uartinit(void)$/;"	f
uartintr	kernel/uart.c	/^uartintr(void)$/;"	f
uartputc	kernel/uart.c	/^uartputc(int c)$/;"	f
uartputc_sync	kernel/uart.c	/^uartputc_sync(int c)$/;"	f
uartstart	kernel/uart.c	/^uartstart()$/;"	f
uchar	kernel/types.h	/^typedef unsigned char  uchar;$/;"	t
uint	kernel/types.h	/^typedef unsigned int   uint;$/;"	t
uint16	kernel/types.h	/^typedef unsigned short uint16;$/;"	t
uint32	kernel/types.h	/^typedef unsigned int  uint32;$/;"	t
uint64	kernel/types.h	/^typedef unsigned long uint64;$/;"	t
uint8	kernel/types.h	/^typedef unsigned char uint8;$/;"	t
uninit	user/usertests.c	/^char uninit[10000];$/;"	v
unlinkread	user/usertests.c	/^unlinkread(char *s)$/;"	f
used	kernel/virtio_disk.c	/^  struct UsedArea *used;$/;"	m	struct:disk	typeref:struct:disk::UsedArea	file:
used_idx	kernel/virtio_disk.c	/^  uint16 used_idx; \/\/ we've looked this far in used[2..NUM].$/;"	m	struct:disk	file:
user_test	gradelib.py	/^    def user_test(self, binary, *monitors, **kw):$/;"	m	class:Runner
userinit	kernel/proc.c	/^userinit(void)$/;"	f
userret	kernel/trampoline.S	/^userret:$/;"	l
usertrap	kernel/trap.c	/^usertrap(void)$/;"	f
usertrapret	kernel/trap.c	/^usertrapret(void)$/;"	f
uservec	kernel/trampoline.S	/^uservec:    $/;"	l
ushort	kernel/types.h	/^typedef unsigned short ushort;$/;"	t
uvmalloc	kernel/vm.c	/^uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)$/;"	f
uvmclear	kernel/vm.c	/^uvmclear(pagetable_t pagetable, uint64 va)$/;"	f
uvmcopy	kernel/vm.c	/^uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)$/;"	f
uvmcreate	kernel/vm.c	/^uvmcreate()$/;"	f
uvmdealloc	kernel/vm.c	/^uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)$/;"	f
uvmfree	kernel/vm.c	/^uvmfree(pagetable_t pagetable, uint64 sz)$/;"	f
uvminit	kernel/vm.c	/^uvminit(pagetable_t pagetable, uchar *src, uint sz)$/;"	f
uvmunmap	kernel/vm.c	/^uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)$/;"	f
vaddr	kernel/elf.h	/^  uint64 vaddr;$/;"	m	struct:proghdr
valid	kernel/buf.h	/^  int valid;   \/\/ has data been read from disk?$/;"	m	struct:buf
valid	kernel/file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode
validatetest	user/usertests.c	/^validatetest(char *s)$/;"	f
vdisk_lock	kernel/virtio_disk.c	/^  struct spinlock vdisk_lock;$/;"	m	struct:disk	typeref:struct:disk::spinlock	file:
version	kernel/elf.h	/^  uint version;$/;"	m	struct:elfhdr
virtio_disk_init	kernel/virtio_disk.c	/^virtio_disk_init(void)$/;"	f
virtio_disk_intr	kernel/virtio_disk.c	/^virtio_disk_intr()$/;"	f
virtio_disk_rw	kernel/virtio_disk.c	/^virtio_disk_rw(struct buf *b, int write)$/;"	f
vprintf	user/printf.c	/^vprintf(int fd, const char *fmt, va_list ap)$/;"	f
w	kernel/console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon3	file:
w_mcounteren	kernel/riscv.h	/^w_mcounteren(uint64 x)$/;"	f
w_medeleg	kernel/riscv.h	/^w_medeleg(uint64 x)$/;"	f
w_mepc	kernel/riscv.h	/^w_mepc(uint64 x)$/;"	f
w_mideleg	kernel/riscv.h	/^w_mideleg(uint64 x)$/;"	f
w_mie	kernel/riscv.h	/^w_mie(uint64 x)$/;"	f
w_mscratch	kernel/riscv.h	/^w_mscratch(uint64 x)$/;"	f
w_mstatus	kernel/riscv.h	/^w_mstatus(uint64 x)$/;"	f
w_mtvec	kernel/riscv.h	/^w_mtvec(uint64 x)$/;"	f
w_satp	kernel/riscv.h	/^w_satp(uint64 x)$/;"	f
w_sepc	kernel/riscv.h	/^w_sepc(uint64 x)$/;"	f
w_sie	kernel/riscv.h	/^w_sie(uint64 x)$/;"	f
w_sip	kernel/riscv.h	/^w_sip(uint64 x)$/;"	f
w_sscratch	kernel/riscv.h	/^w_sscratch(uint64 x)$/;"	f
w_sstatus	kernel/riscv.h	/^w_sstatus(uint64 x)$/;"	f
w_stvec	kernel/riscv.h	/^w_stvec(uint64 x)$/;"	f
w_tp	kernel/riscv.h	/^w_tp(uint64 x)$/;"	f
wait	gradelib.py	/^    def wait(self):$/;"	f
wait	kernel/proc.c	/^wait(uint64 addr)$/;"	f
wakeup	kernel/proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	kernel/proc.c	/^wakeup1(struct proc *p)$/;"	f	file:
walk	kernel/vm.c	/^walk(pagetable_t pagetable, uint64 va, int alloc)$/;"	f
walkaddr	kernel/vm.c	/^walkaddr(pagetable_t pagetable, uint64 va)$/;"	f
wc	user/wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	user/sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs/mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	kernel/file.h	/^  char writable;$/;"	m	struct:file
write	gradelib.py	/^    def write(self, buf):$/;"	f
write	kernel/file.h	/^  int (*write)(int, uint64, int);$/;"	m	struct:devsw
write_head	kernel/log.c	/^write_head(void)$/;"	f	file:
write_log	kernel/log.c	/^write_log(void)$/;"	f	file:
writebig	user/usertests.c	/^writebig(char *s)$/;"	f
writei	kernel/fs.c	/^writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)$/;"	f
writeopen	kernel/pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	user/usertests.c	/^writetest(char *s)$/;"	f
wsect	mkfs/mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	user/umalloc.c	/^  Align x;$/;"	m	union:header	file:
xint	mkfs/mkfs.c	/^xint(uint x)$/;"	f
xshort	mkfs/mkfs.c	/^xshort(ushort x)$/;"	f
xstate	kernel/proc.h	/^  int xstate;                  \/\/ Exit status to be returned to parent's wait$/;"	m	struct:proc
year	kernel/date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	kernel/proc.c	/^yield(void)$/;"	f
zeroes	mkfs/mkfs.c	/^char zeroes[BSIZE];$/;"	v
